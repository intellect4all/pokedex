// Mocks generated by Mockito 5.1.0 from annotations
// in pokedex/test/features/data/data_sources/remote_data_source/pokemon_remote_data_source_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:convert' as _i4;
import 'dart:typed_data' as _i7;

import 'package:http/src/base_request.dart' as _i8;
import 'package:http/src/client.dart' as _i5;
import 'package:http/src/response.dart' as _i2;
import 'package:http/src/streamed_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0 extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse_1 extends _i1.Fake implements _i3.StreamedResponse {
}

class _FakeJsonEncoder_2 extends _i1.Fake implements _i4.JsonEncoder {}

class _FakeJsonDecoder_3 extends _i1.Fake implements _i4.JsonDecoder {}

class _FakeCodec_4<S, T> extends _i1.Fake implements _i4.Codec<S, T> {}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i5.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i6.Future<_i2.Response>);
  @override
  _i6.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i6.Future<_i2.Response>);
  @override
  _i6.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i4.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i6.Future<_i2.Response>);
  @override
  _i6.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i4.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i6.Future<_i2.Response>);
  @override
  _i6.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i4.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i6.Future<_i2.Response>);
  @override
  _i6.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i4.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i6.Future<_i2.Response>);
  @override
  _i6.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<_i7.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i7.Uint8List>.value(_i7.Uint8List(0)))
          as _i6.Future<_i7.Uint8List>);
  @override
  _i6.Future<_i3.StreamedResponse> send(_i8.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_1()))
          as _i6.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [JsonCodec].
///
/// See the documentation for Mockito's code generation for more information.
class MockJsonCodec extends _i1.Mock implements _i4.JsonCodec {
  MockJsonCodec() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.JsonEncoder get encoder =>
      (super.noSuchMethod(Invocation.getter(#encoder),
          returnValue: _FakeJsonEncoder_2()) as _i4.JsonEncoder);
  @override
  _i4.JsonDecoder get decoder =>
      (super.noSuchMethod(Invocation.getter(#decoder),
          returnValue: _FakeJsonDecoder_3()) as _i4.JsonDecoder);
  @override
  _i4.Codec<String, Object?> get inverted =>
      (super.noSuchMethod(Invocation.getter(#inverted),
              returnValue: _FakeCodec_4<String, Object?>())
          as _i4.Codec<String, Object?>);
  @override
  dynamic decode(String? source,
          {Object? Function(Object?, Object?)? reviver}) =>
      super.noSuchMethod(
          Invocation.method(#decode, [source], {#reviver: reviver}));
  @override
  String encode(Object? value, {Object? Function(dynamic)? toEncodable}) =>
      (super.noSuchMethod(
          Invocation.method(#encode, [value], {#toEncodable: toEncodable}),
          returnValue: '') as String);
  @override
  _i4.Codec<Object?, R> fuse<R>(_i4.Codec<String, R>? other) =>
      (super.noSuchMethod(Invocation.method(#fuse, [other]),
          returnValue: _FakeCodec_4<Object?, R>()) as _i4.Codec<Object?, R>);
}
